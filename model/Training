import csv
import numpy as np
import tensorflow as tf
from sklearn.model_selection import train_test_split
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix, classification_report

RANDOM_SEED = 87

# Specify each path
dataset = 'model/keypoint_classifier/keypoint.csv'
labels_file = 'model/keypoint_classifier/keypoint_classifier_label.csv'
model_save_path = 'model/asl_classifier.hdf5'

# Load class labels from file
def load_class_labels(labels_file):
    """
    Load class labels from CSV file
    
    Args:
        labels_file (str): Path to labels file
        
    Returns:
        list: List of class names
    """
    class_names = []
    try:
        with open(labels_file, 'r', encoding='utf-8-sig') as f:
            for line in f:
                class_names.append(line.strip())
        
        print(f"Loaded {len(class_names)} class labels: {class_names}")
        return class_names
    
    except FileNotFoundError:
        print(f"Labels file not found: {labels_file}")
        print("Using default class names...")
        return None
    except Exception as e:
        print(f"Error loading labels file: {e}")
        print("Using default class names...")
        return None

# Load class labels
class_labels = load_class_labels(labels_file)

# Set number of classes based on labels file or manually 
NUM_CLASSES = len(class_labels)


X_dataset = np.loadtxt(dataset, delimiter=',', dtype='float32', usecols=list(range(1, (21 * 2) + 1)))
y_dataset = np.loadtxt(dataset, delimiter=',', dtype='int32', usecols=(0))
X_train, X_test, y_train, y_test = train_test_split(X_dataset, y_dataset, train_size=0.75, random_state=RANDOM_SEED)


# Define class names based on number of classes
def get_class_names(num_classes, loaded_labels=None):
    return loaded_labels[:num_classes]
    


class_names = get_class_names(NUM_CLASSES, class_labels)

print(f"Using class names: {class_names}")
print(f"Training data shape: {X_train.shape}")
print(f"Training labels shape: {y_train.shape}")
print(f"Test data shape: {X_test.shape}")
print(f"Test labels shape: {y_test.shape}")
print(f"Number of classes: {NUM_CLASSES}")

# Show label distribution
print(f"\nLabel distribution:")
unique, counts = np.unique(y_dataset, return_counts=True)
for label, count in zip(unique, counts):
    class_name = class_names[label] if label < len(class_names) else f'Class_{label}'
    print(f"  {class_name} (label {label}): {count} samples")

# Model building - Your ASL architecture
model = tf.keras.models.Sequential([
    tf.keras.layers.Input(shape=(42,)),
    tf.keras.layers.Dense(128, activation='relu', name='dense_1'),
    tf.keras.layers.Dense(64, activation='relu', name='dense_2'),
    tf.keras.layers.Dense(32, activation='relu', name='dense_3'),
    tf.keras.layers.Dense(16, activation='relu', name='dense_4'),
    tf.keras.layers.Dense(NUM_CLASSES, activation='softmax', name='output')
])

# Compile the model
model.compile(
    optimizer='adam',
    loss='sparse_categorical_crossentropy',  # Use this for integer labels
    metrics=['accuracy']
)

# Print model summary
print("\nModel Architecture:")
model.summary()

# Train the model
print("\nTraining the model...")
history = model.fit(
    X_train, y_train,
    epochs=100,
    batch_size=32,
    validation_data=(X_test, y_test),
    verbose=1,
    callbacks=[
        tf.keras.callbacks.EarlyStopping(patience=10, restore_best_weights=True),
        tf.keras.callbacks.ReduceLROnPlateau(factor=0.5, patience=5)
    ]
)

# Model evaluation
print("\nEvaluating the model...")
val_loss, val_acc = model.evaluate(X_test, y_test, batch_size=128)
print(f"Test Loss: {val_loss:.4f}")
print(f"Test Accuracy: {val_acc:.4f}")

# Save the model
model.save(model_save_path)
print(f"Model saved to: {model_save_path}")


# Inference test
print("\nTesting inference...")
predict_result = model.predict(np.array([X_test[0]]))
print("Prediction probabilities:", np.squeeze(predict_result))
print("Predicted class:", np.argmax(np.squeeze(predict_result)))
print("Actual class:", y_test[0])

# Confusion matrix function
def print_confusion_matrix(y_true, y_pred, class_names=None, report=True):
    """
    Print and visualize confusion matrix
    
    Args:
        y_true: True labels
        y_pred: Predicted labels  
        class_names: List of class names for labeling (optional)
        report: Whether to print classification report
    """
    labels = sorted(list(set(y_true)))
    cmx_data = confusion_matrix(y_true, y_pred, labels=labels)
    
    display_labels = [class_names[i] if i < len(class_names) else f'Class_{i}' for i in labels]

    df_cmx = pd.DataFrame(cmx_data, index=display_labels, columns=display_labels)
 
    plt.figure(figsize=(10, 8))
    sns.heatmap(df_cmx, annot=True, fmt='g', square=False, cmap='Blues')
    plt.title('Confusion Matrix')
    plt.ylabel('True Label')
    plt.xlabel('Predicted Label')
    plt.xticks(rotation=45)
    plt.yticks(rotation=0)
    plt.tight_layout()
    plt.show()
    
    if report:
        print('\nClassification Report:')
        if class_names is not None:
            target_names = [class_names[i] if i < len(class_names) else f'Class_{i}' for i in labels]
            print(classification_report(y_true, y_pred, target_names=target_names))
        else:
            print(classification_report(y_true, y_pred))

# Generate predictions for confusion matrix
print("\nGenerating predictions for confusion matrix...")
Y_pred = model.predict(X_test)
y_pred = np.argmax(Y_pred, axis=1)

# Print confusion matrix
print("\nConfusion Matrix:")
print_confusion_matrix(y_test, y_pred, class_names=class_names)

# Additional analysis
print(f"\nModel Performance Summary:")
print(f"Total test samples: {len(y_test)}")
print(f"Correct predictions: {np.sum(y_test == y_pred)}")
print(f"Incorrect predictions: {np.sum(y_test != y_pred)}")
print(f"Accuracy: {np.mean(y_test == y_pred):.4f}")

# Per-class accuracy
print(f"\nPer-class accuracy:")
for i in range(NUM_CLASSES):
    class_mask = y_test == i
    if np.sum(class_mask) > 0:
        class_acc = np.mean(y_pred[class_mask] == y_test[class_mask])
        class_name = class_names[i] if i < len(class_names) else f'Class_{i}'
        print(f"  {class_name}: {class_acc:.4f} ({np.sum(class_mask)} samples)")

# Plot training history
plt.figure(figsize=(12, 4))

plt.subplot(1, 2, 1)
plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Model Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(history.history['accuracy'], label='Training Accuracy')
plt.plot(history.history['val_accuracy'], label='Validation Accuracy')
plt.title('Model Accuracy')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()

plt.tight_layout()
plt.show()

print("\nTraining completed successfully!")